openapi: 3.0.3
info:
  title: JobCopilot Backend API
  version: 1.0.0
  description: |
    REST API for job cards, stats and due-date reminders.
    All success responses use a unified envelope `{ ok: true, ... }`.
    All errors use `{ ok: false, code, message, details? }`.

servers:
  - url: https://ht1x7aamak.execute-api.ca-central-1.amazonaws.com
    description: Prod (HTTP API)
  - url: http://localhost:3000
    description: Local (if you run emulation)

tags:
  - name: Cards
  - name: Stats
  - name: Reminders
  - name: Misc

security:
  - bearerAuth: []

paths:
  /health:
    get:
      tags: [Misc]
      summary: Health check (no auth)
      security: []   # open
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OkOnly' }

  /cards:
    get:
      tags: [Cards]
      summary: List cards (with pagination & filters)
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
        - $ref: '#/components/parameters/Statuses'
        - $ref: '#/components/parameters/Q'
      responses:
        '200':
          description: Card list
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CardListResponse' }
              examples:
                example:
                  value:
                    ok: true
                    count: 2
                    items:
                      - $ref: '#/components/examples/Card1'
                      - $ref: '#/components/examples/Card2'
                    nextCursor: null
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/Internal' }

    post:
      tags: [Cards]
      summary: Create a card
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateCardRequest' }
            example:
              title: "Software Engineer"
              company: "Acme"
              location: "Toronto"
              status: "Applied"
              dueDate: "2025-09-05"
              tags: ["backend", "referral"]
              notes: "Applied via career page"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                required: [ok, item]
                properties:
                  ok: { type: boolean, enum: [true] }
                  item: { $ref: '#/components/schemas/Card' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/Internal' }

  /cards/{cardId}:
    parameters:
      - name: cardId
        in: path
        required: true
        schema: { type: string }
    put:
      tags: [Cards]
      summary: Update a card (partial)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateCardRequest' }
            example:
              title: "Sr. Software Engineer"
              status: "Interview"
              dueDate: "2025-09-10"
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                required: [ok, item]
                properties:
                  ok: { type: boolean, enum: [true] }
                  item: { $ref: '#/components/schemas/Card' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/Internal' }

    delete:
      tags: [Cards]
      summary: Delete a card
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                required: [ok, cardId]
                properties:
                  ok: { type: boolean, enum: [true] }
                  cardId: { type: string }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/Internal' }

  /stats:
    get:
      tags: [Stats]
      summary: Aggregate stats by status/company/title/location/tag
      responses:
        '200':
          description: Stats
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StatsResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/Internal' }

  /reminders/upcoming:
    get:
      tags: [Reminders]
      summary: List cards whose dueDate is within N days (default 7)
      parameters:
        - $ref: '#/components/parameters/Days'
        - $ref: '#/components/parameters/Statuses'
      responses:
        '200':
          description: Upcoming reminders
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CardListResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/Internal' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    Limit:
      name: limit
      in: query
      description: Page size (1..100, default 25)
      schema: { type: integer, minimum: 1, maximum: 100, default: 25 }
    Cursor:
      name: cursor
      in: query
      description: Base64url-encoded cursor from the previous page
      schema: { type: string, nullable: true }
    Statuses:
      name: status
      in: query
      description: Comma-separated stages
      schema:
        type: array
        items: { $ref: '#/components/schemas/Stage' }
        style: form
        explode: false
    Q:
      name: q
      in: query
      description: Free-text filter (title/company/location/notes/tags)
      schema: { type: string, maxLength: 200 }
    Days:
      name: days
      in: query
      description: Look-ahead window in days (1..90, default 7)
      schema: { type: integer, minimum: 1, maximum: 90, default: 7 }

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorEnvelope' }
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorEnvelope' }
    NotFound:
      description: Not Found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorEnvelope' }
    Internal:
      description: Internal Server Error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorEnvelope' }

  schemas:
    OkOnly:
      type: object
      required: [ok]
      properties:
        ok: { type: boolean, enum: [true] }

    Stage:
      type: string
      enum: [Saved, Applied, Screening, Interview, Final]

    Card:
      type: object
      required:
        - cardId
        - userId
        - title
        - company
        - location
        - status
        - tags
        - notes
        - createdAt
        - updatedAt
      properties:
        cardId: { type: string }
        userId: { type: string }
        title: { type: string, maxLength: 200 }
        company: { type: string }
        location: { type: string }
        status: { $ref: '#/components/schemas/Stage' }
        dueDate:
          type: string
          format: date
          nullable: true
          description: YYYY-MM-DD or null
        tags:
          type: array
          items: { type: string }
        notes: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    CardListResponse:
      type: object
      required: [ok, count, items]
      properties:
        ok: { type: boolean, enum: [true] }
        count: { type: integer }
        items:
          type: array
          items: { $ref: '#/components/schemas/Card' }
        nextCursor:
          type: string
          nullable: true

    CreateCardRequest:
      type: object
      additionalProperties: false
      properties:
        title: { type: string, maxLength: 200 }
        company: { type: string }
        location: { type: string }
        status: { $ref: '#/components/schemas/Stage' }
        dueDate:
          type: string
          format: date
          description: YYYY-MM-DD
        tags:
          type: array
          items: { type: string }
        notes: { type: string }

    UpdateCardRequest:
      type: object
      additionalProperties: false
      description: Provide any subset of fields to update
      properties:
        title: { type: string, maxLength: 200 }
        company: { type: string }
        location: { type: string }
        status: { $ref: '#/components/schemas/Stage' }
        dueDate:
          type: string
          format: date
          nullable: true
          description: Set to null to clear due date
        tags:
          type: array
          items: { type: string }
        notes: { type: string }

    StatsMap:
      type: object
      additionalProperties:
        type: integer
        format: int32

    StatsResponse:
      type: object
      required: [ok, count, totals]
      properties:
        ok: { type: boolean, enum: [true] }
        count: { type: integer }
        totals:
          type: object
          required: [byStatus, byCompany, byTitle, byLocation, byTag]
          properties:
            byStatus: { $ref: '#/components/schemas/StatsMap' }
            byCompany: { $ref: '#/components/schemas/StatsMap' }
            byTitle: { $ref: '#/components/schemas/StatsMap' }
            byLocation: { $ref: '#/components/schemas/StatsMap' }
            byTag: { $ref: '#/components/schemas/StatsMap' }

    ErrorEnvelope:
      type: object
      required: [ok, code, message]
      properties:
        ok: { type: boolean, enum: [false] }
        code:
          type: string
          enum: [BadRequest, Unauthorized, NotFound, Internal]
        message: { type: string }
        details:
          type: object
          additionalProperties: true

  examples:
    Card1:
      value:
        cardId: "abcd-1234"
        userId: "user-1"
        title: "Software Engineer"
        company: "Acme"
        location: "Toronto"
        status: "Applied"
        dueDate: "2025-09-05"
        tags: ["backend"]
        notes: ""
        createdAt: "2025-08-31T10:20:30.000Z"
        updatedAt: "2025-08-31T10:20:30.000Z"
    Card2:
      value:
        cardId: "efgh-5678"
        userId: "user-1"
        title: "Data Engineer"
        company: "Beta"
        location: "Remote"
        status: "Saved"
        dueDate: null
        tags: []
        notes: ""
        createdAt: "2025-08-31T10:21:00.000Z"
        updatedAt: "2025-08-31T10:21:00.000Z"
